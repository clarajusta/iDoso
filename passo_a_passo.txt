1) Credencial OAuth 2.0
	Arquivo client_secret do google clound, que contém as credenciais do Oauth2.0
	baixar o arquivo da credencial idoso.json, nomear como client_secret
	
2) Instalar google api

pip install google-api-python-client

3)Aplicação para acessar um calendario de um usuario
O usuario tera que fornecer a permissão para o meu projeto ter acesso ao calendario dele
então iremos fazer o setup do oauth 2.0 usando o codigo a seguir:

from apiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
	
scopes = ['https://www.googleapis.com/auth/calendar']

flow = InstalledAppFlow.from_client_secrets_file("client_secret.json", scopes=scopes)
flow.run_console()

ao rodar o codigo iremos receber o link e codigo para autorizar o acesso ao calendario. 

4) o uso do picke é para salvar as credenciais para nao precisar fazer isso toda vez
então agora iremos rodar no mesmo arquivo esse código:

from apiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
	
scopes = ['https://www.googleapis.com/auth/calendar']

flow = InstalledAppFlow.from_client_secrets_file("client_secret.json", scopes=scopes)
credentials = flow.run_console()

import pickle
pickle.dump(credentials, open("token.pkl", "wb"))
#credentials = pickle.load(open("token.pkl", "rb")) esse sera o comando que usaremos para a proxima nao precisarmos rodar tudo de novo

verficar se dentro da pasta onde tem o client_secret e o codigo, agora tem o arquivo token

5) agora rodando o codigo a seguir, voce consegue ver as suas config de calendario: 

from apiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
	
scopes = ['https://www.googleapis.com/auth/calendar']

#flow = InstalledAppFlow.from_client_secrets_file("client_secret.json", scopes=scopes)
#credentials = flow.run_console()

import pickle
#pickle.dump(credentials, open("token.pkl", "wb"))
credentials = pickle.load(open("token.pkl", "rb"))
service = build("calendar", "v3", credentials=credentials)

#calendar_id = result ['items'][0]['id']
#result = service.events().list(calendarId=calendar_id).execute()
result = service.calendarList().list().execute()
#result['items'][0]
print(result)

#todo o calendario priamrio, a id é o proprio e-mail

6) mostrar todos os eventosque tem no calendario
from apiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
	
scopes = ['https://www.googleapis.com/auth/calendar']

#flow = InstalledAppFlow.from_client_secrets_file("client_secret.json", scopes=scopes)
#credentials = flow.run_console()

import pickle
#pickle.dump(credentials, open("token.pkl", "wb"))
credentials = pickle.load(open("token.pkl", "rb"))
service = build("calendar", "v3", credentials=credentials)

result = service.calendarList().list().execute()
result['items'][0]
calendar_id = result ['items'][0]['id']
result = service.events().list(calendarId=calendar_id).execute()
print(result)

7) adicionando timeZone

from apiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
	
scopes = ['https://www.googleapis.com/auth/calendar']

#flow = InstalledAppFlow.from_client_secrets_file("client_secret.json", scopes=scopes)
#credentials = flow.run_console()

import pickle
#pickle.dump(credentials, open("token.pkl", "wb"))
credentials = pickle.load(open("token.pkl", "rb"))
service = build("calendar", "v3", credentials=credentials)

result = service.calendarList().list().execute()
result['items'][0]
calendar_id = result ['items'][0]['id']
result = service.events().list(calendarId=calendar_id, timeZone='America/Sao_Paulo').execute()
print(result)

8) criar novo evento

from apiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
	
scopes = ['https://www.googleapis.com/auth/calendar']

#flow = InstalledAppFlow.from_client_secrets_file("client_secret.json", scopes=scopes)
#credentials = flow.run_console()

import pickle
#pickle.dump(credentials, open("token.pkl", "wb"))
credentials = pickle.load(open("token.pkl", "rb"))
service = build("calendar", "v3", credentials=credentials)

result = service.calendarList().list().execute()
result['items'][0]
calendar_id = result ['items'][0]['id']
result = service.events().list(calendarId=calendar_id, timeZone='America/Sao_Paulo').execute()
#print(result)

#criando evento

from datetime import datetime, timedelta
start_time = datetime(2021, 5, 5, 20, 0, 0) #ano, mês, data, hora, minuto, segundo
end_time=start_time + timedelta(hours=4) #acho que aqui é duração
timezone = 'America/Sao_Paulo'
event = {
  'summary': 'Primeiro evento com codigo!',
  'location': 'Casa',
  'description': 'SOE Projeto final',
  'start': {
    'dateTime': start_time.strftime("%Y-%m-%dT%H:%M:%S"), #criando string para datetime e a ordem da data 
    'timeZone': timezone,
  }, #podemos colocar quantas vezes o evento irá se repetir com o uso de "recurrence" e tbm podemos convidar pessoas por email
  'end': {
    'dateTime': end_time.strftime("%Y-%m-%dT%H:%M:%S"),
    'timeZone': timezone,
  },
  'reminders': { #lembretes por e-mail e tempo do e-mail
    'useDefault': False,
    'overrides': [
      {'method': 'email', 'minutes': 24 * 60}, #notificacao e-mail 24 horas antes do evento
      {'method': 'popup', 'minutes': 10}, #notificacao popup 10min antes do evento 
    ],
  },
}

service.events().insert(calendarId=calendar_id, body=event).execute() 

9) uso da função datetimer, para encontrar a partir de uma string a data
 
 9.1) pip install datefinder
 9.2) no codigo usando anteriormente, adicione: 
 import datefinder 
matches = datefinder.find_dates ("5 may 9 PM")
print (list(matches))

*problema, o usuario deve estar falando em ingles

